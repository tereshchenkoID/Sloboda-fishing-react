{"version":3,"file":"static/css/430.d95305a3.chunk.css","mappings":"AAEA,yBAGE,qBACA,kBADA,wCAFA,aACA,0BAEA,aCoEE,wBDxEJ,yBAOI,qCCiEA,wBDxEJ,yBAWI,qCAIJ,yBAGE,0BACA,eEmCI,kBALS,CAKT,eFnCJ,CAGF,0BGtBE,oBHuBoB,CGtBpB,4BAFA,oBH0BA,eGvBA,gBHwBA,yBAIE,kCACE,0BAKN,4BILI,kBJOoB,CIItB,aAfE,sBJWY,CEgBV,eE9BM,CJiBZ,gCGzCE,oBH0CoB,CGzCpB,4BAFA,oBAGA,gBH2CF,2BAGE,wCEMI,kBFNJ,CAEA,kCACE,cKnDJ,qBHsDM,kBALS,CG7Cb,kBJoEE,wBIxEJ,qBHsDM,mBALS,EG1Cf,iBAKE,qCACA,QAAO,CCQP,UDXqB,CCUrB,WDPA,CAGF,2CHsCM,gBALS,CAKT,iBALS,CAKT,eGlCJ,CAJF,0BAIE,gBEpBF,oBAKE,wCADA,qBAGA,gBL+CI,iBALS,CK3Cb,kBAEA,kBAEA,2BAOE,qCAJA,SAKA,WAJA,OAHA,kBACA,MAIA,qCADA,OAGA,CAKA,iCACE,WAKN,kBAGE,yBAFA,kBACA,SACA","sources":["Sections/SectionNews/index.module.scss","scss/abstract/helpers/mixins/_breakpoints.scss","scss/abstract/helpers/mixins/_spacing.scss","scss/abstract/helpers/mixins/_line-clamp.scss","scss/abstract/helpers/mixins/_flexbox.scss","Components/Title/index.module.scss","scss/abstract/helpers/mixins/_size.scss","Components/Link/index.module.scss"],"sourcesContent":["@import \"../../scss/config\";\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  column-gap: 20px;\n  row-gap: 40px;\n\n  @include media-breakpoint-up(sm) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @include media-breakpoint-up(lg) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n.date {\n  @include make-spacer('my', 2);\n\n  color: var(--color-accent);\n  font-size: 14px;\n}\n\n.title {\n  @include line-clamp(3);\n\n  font-size: 16px;\n  text-transform: uppercase;\n\n  a {\n\n    &:hover {\n      color: var(--color-accent);\n    }\n  }\n}\n\n.wrapper {\n  @include make-spacer('mt', 10);\n  @include flex(center, center);\n}\n\n.description {\n  @include line-clamp(3);\n}\n\n.player {\n  @include make-spacer('mb', 2);\n\n  background-color: var(--color-secondary);\n\n  iframe {\n    display: block;\n  }\n}\n","// stylelint-disable at-rule-empty-line-before\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 40em, md: 75em, lg: 105em)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n\n  @return if(\n      $n < length($breakpoint-names),\n      nth($breakpoint-names, $n + 1),\n      null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    40em\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  //@return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.01em, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","// stylelint-disable at-rule-empty-line-before\n\n@function get-prop-name($prop) {\n  @if (index((m, mx, my, mt, mb, ml, mr), $prop)) {\n    @return margin;\n  } @else if (index((p, px, py, pt, pb, pl, pr), $prop)) {\n    @return padding;\n  } @else {\n    @return null;\n  }\n}\n\n@function get-prop-postfix-group($prop) {\n  $postfix-group: ();\n\n  @if (index((pl, ml, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -left);\n  }\n\n  @if (index((pr, mr, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -right);\n  }\n\n  @if (index((pt, mt, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -top);\n  }\n\n  @if (index((pb, mb, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -bottom);\n  }\n\n  @return $postfix-group;\n}\n\n@function get-prop-value($prop, $size, $spacers: $spacers) {\n  $length: map-get($spacers, $size);\n\n  @if (index((px, mx, pl, pr, ml, mr), $prop)) {\n    @return $length;\n  } @else if (index((py, my, pt, pb, mt, mb), $prop)) {\n    @return $length;\n  } @else if (index((p, m), $prop)) {\n    @return $length $length;\n  } @else {\n    @error '#{$prop} is invalid value';\n  }\n}\n\n@mixin _make-spacer($prop, $size) {\n  // stylelint-disable-line\n  $prop-name: get-prop-name($prop);\n  $prop-value: get-prop-value($prop, $size);\n  $prop-postfixes: get-prop-postfix-group($prop);\n\n  @if (length($prop-postfixes) > 0) {\n    @each $postfix in $prop-postfixes {\n      #{$prop-name}#{$postfix}: $prop-value;\n    }\n  } @else {\n    #{$prop-name}: $prop-value;\n  }\n}\n\n@mixin make-spacer($prop, $size, $breakpoint: null) {\n  @if ($breakpoint) {\n    @include media-breakpoint-up($breakpoint) {\n      @include _make-spacer($prop, $size);\n    }\n  } @else {\n    @include _make-spacer($prop, $size);\n  }\n}\n\n// @include make-spacer(mb, 2);\n// mb - margin-bottom\n// 2 - grid 2 points size (1 point for example 8px)\n","@mixin line-clamp($count) {\n  display: -webkit-box;\n  -webkit-line-clamp: $count;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","///\n/// Simple use Flexbox\n///\n/// @access public\n///\n/// @param {Sub-Property} $justify-content\n/// @param {Sub-Property} $align-items\n/// @param {Sub-Property} $direction\n/// @param {Sub-Property} $wrap\n/// @param {Sub-Property} $display\n/// @example scss - usage\n///\n/// .foo {\n///   @include flex(space-between, center, column, wrap);\n/// }\n/// or\n/// .foo {\n///   @include flex(space-between, center, $display: inline-flex);\n/// }\n///\n\n@mixin flex(\n  $justify-content: null,\n  $align-items: null,\n  $direction: null,\n  $wrap: null,\n  $display: flex\n) {\n  @if $justify-content != null {\n    justify-content: $justify-content;\n  }\n\n  @if $align-items != null {\n    align-items: $align-items;\n  }\n\n  @if $direction != null {\n    flex-direction: $direction;\n  }\n\n  @if $wrap != null {\n    flex-wrap: $wrap;\n  }\n\n  display: $display;\n}\n","@import \"../../scss/config\";\n\n.block {\n  @include make-spacer('mb', 10);\n  @include make-spacer('mb', 20, lg);\n\n  text-align: center;\n}\n\n.hr {\n  @include make-spacer('mx', auto);\n  @include make-spacer('mt', 4);\n  @include size(100px, 2px);\n\n  background-color: var(--color-accent);\n  border: 0;\n}\n\n.description {\n  @include make-spacer('mx', auto);\n  @include make-spacer('mt', 4);\n\n  max-width: 600px;\n}\n","///\n/// Ease to set the width and height values\n///\n/// Mixin make easy to set the value `width` and `height` in the same time.\n///\n/// @access public\n///\n/// @param {Length} $width - `width` element\n/// @param {Length} $height ($width) - `height` element\n///\n/// @example scss - usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///    @include size(100%, 10em);\n///   }\n///\n/// https://sass-guidelin.es/ru/#section-33\n\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n","@import \"../../scss/config\";\n\n.block {\n  @include make-spacer('py', 3);\n  @include make-spacer('px', 4);\n\n  display: inline-block;\n  background-color: var(--color-secondary);\n  position: relative;\n  min-width: 150px;\n  text-align: center;\n\n  &::before {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 0;\n    transition: var(--default-transition);\n    background-color: var(--color-accent);\n    content: '';\n  }\n\n  &:hover {\n\n    &::before {\n      width: 100%;\n    }\n  }\n}\n\n.text {\n  position: relative;\n  z-index: 1;\n  color: var(--color-white);\n}\n"],"names":[],"sourceRoot":""}